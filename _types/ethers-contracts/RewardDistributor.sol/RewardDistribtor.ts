/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface RewardDistribtorInterface extends Interface {
    getFunction(nameOrSignature: "claimReward" | "isLeafRewardClaimed" | "maxPosterFee" | "postReward" | "posterFee" | "rewardLeft" | "rewardPoster" | "rewardToken" | "safe" | "setup" | "totalReward" | "updatePosterFee"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "PosterFeeUpdated" | "RewardClaimed" | "RewardPosted"): EventFragment;

    encodeFunctionData(functionFragment: 'claimReward', values: [AddressLike, BigNumberish, BytesLike, BytesLike, BytesLike[]]): string;
encodeFunctionData(functionFragment: 'isLeafRewardClaimed', values: [BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'maxPosterFee', values?: undefined): string;
encodeFunctionData(functionFragment: 'postReward', values: [BytesLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'posterFee', values?: undefined): string;
encodeFunctionData(functionFragment: 'rewardLeft', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'rewardPoster', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'safe', values?: undefined): string;
encodeFunctionData(functionFragment: 'setup', values: [AddressLike, BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'totalReward', values?: undefined): string;
encodeFunctionData(functionFragment: 'updatePosterFee', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isLeafRewardClaimed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'maxPosterFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'postReward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'posterFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rewardLeft', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rewardPoster', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safe', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setup', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalReward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updatePosterFee', data: BytesLike): Result;
  }

  
    export namespace PosterFeeUpdatedEvent {
      export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
      export type OutputTuple = [oldFee: bigint, newFee: bigint];
      export interface OutputObject {oldFee: bigint, newFee: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardClaimedEvent {
      export type InputTuple = [recipient: AddressLike, amount: BigNumberish, claimer: AddressLike];
      export type OutputTuple = [recipient: string, amount: bigint, claimer: string];
      export interface OutputObject {recipient: string, amount: bigint, claimer: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardPostedEvent {
      export type InputTuple = [root: BytesLike, amount: BigNumberish, poster: AddressLike];
      export type OutputTuple = [root: string, amount: bigint, poster: string];
      export interface OutputObject {root: string, amount: bigint, poster: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface RewardDistribtor extends BaseContract {
    
    connect(runner?: ContractRunner | null): RewardDistribtor;
    waitForDeployment(): Promise<this>;

    interface: RewardDistribtorInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    claimReward: TypedContractMethod<
      [recipient: AddressLike, amount: BigNumberish, kwilBlockHash: BytesLike, rewardRoot: BytesLike, proofs: BytesLike[], ],
      [void],
      'payable'
    >
    

    
    isLeafRewardClaimed: TypedContractMethod<
      [arg0: BytesLike, arg1: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    maxPosterFee: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    postReward: TypedContractMethod<
      [root: BytesLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    posterFee: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    rewardLeft: TypedContractMethod<
      [arg0: BytesLike, ],
      [bigint],
      'view'
    >
    

    
    rewardPoster: TypedContractMethod<
      [arg0: BytesLike, ],
      [string],
      'view'
    >
    

    
    rewardToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    safe: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setup: TypedContractMethod<
      [_safe: AddressLike, _posterFee: BigNumberish, _rewardToken: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    totalReward: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    updatePosterFee: TypedContractMethod<
      [newFee: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'claimReward'): TypedContractMethod<
      [recipient: AddressLike, amount: BigNumberish, kwilBlockHash: BytesLike, rewardRoot: BytesLike, proofs: BytesLike[], ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'isLeafRewardClaimed'): TypedContractMethod<
      [arg0: BytesLike, arg1: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'maxPosterFee'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'postReward'): TypedContractMethod<
      [root: BytesLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'posterFee'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'rewardLeft'): TypedContractMethod<
      [arg0: BytesLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'rewardPoster'): TypedContractMethod<
      [arg0: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'rewardToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'safe'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setup'): TypedContractMethod<
      [_safe: AddressLike, _posterFee: BigNumberish, _rewardToken: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalReward'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'updatePosterFee'): TypedContractMethod<
      [newFee: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'PosterFeeUpdated'): TypedContractEvent<PosterFeeUpdatedEvent.InputTuple, PosterFeeUpdatedEvent.OutputTuple, PosterFeeUpdatedEvent.OutputObject>;
getEvent(key: 'RewardClaimed'): TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
getEvent(key: 'RewardPosted'): TypedContractEvent<RewardPostedEvent.InputTuple, RewardPostedEvent.OutputTuple, RewardPostedEvent.OutputObject>;

    filters: {
      
      'PosterFeeUpdated(uint256,uint256)': TypedContractEvent<PosterFeeUpdatedEvent.InputTuple, PosterFeeUpdatedEvent.OutputTuple, PosterFeeUpdatedEvent.OutputObject>;
      PosterFeeUpdated: TypedContractEvent<PosterFeeUpdatedEvent.InputTuple, PosterFeeUpdatedEvent.OutputTuple, PosterFeeUpdatedEvent.OutputObject>;
    

      'RewardClaimed(address,uint256,address)': TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
      RewardClaimed: TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
    

      'RewardPosted(bytes32,uint256,address)': TypedContractEvent<RewardPostedEvent.InputTuple, RewardPostedEvent.OutputTuple, RewardPostedEvent.OutputObject>;
      RewardPosted: TypedContractEvent<RewardPostedEvent.InputTuple, RewardPostedEvent.OutputTuple, RewardPostedEvent.OutputObject>;
    
    };
  }